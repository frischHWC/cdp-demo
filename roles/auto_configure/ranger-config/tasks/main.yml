---
- set_fact:
    ranger_service_name: "{{ cloudera_manager_all_services.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'RANGER'].name | [0]"

- name: DEBUG - ranger_service_name
  debug:
    msg: "{{ ranger_service_name }}"
  when: debug | default(false)

- set_fact:
    ranger_server: "{{ cloudera_manager_deployment.json | community.general.json_query(query) }}"
  vars:
    query: "clusters[?name == '{{ cluster_name }}' ].services[].roles[?type == 'RANGER_ADMIN'][].hostRef.hostname | [0]"

- name: DEBUG - Ranger Server 
  debug:
    msg: "{{ ranger_server }}"
  when: debug | default(false)


- name: Get Ranger full config
  uri:
    url: "{{ cloudera_manager_url }}/api/v41/clusters/{{ cluster_name }}/services/{{ ranger_service_name }}/config?view=full"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: full_ranger_config

- name: Get Ranger Admin full config
  uri:
    url: "{{ cloudera_manager_url }}/api/v31/clusters/{{ cluster_name }}/services/{{ ranger_service_name }}/roleConfigGroups/{{ ranger_service_name }}-RANGER_ADMIN-BASE/config?view=full"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: full_ranger_admin_config


- set_fact:
    ranger_ssl: "{{ full_ranger_admin_config.json | community.general.json_query(query) }}"
  vars:
    query: "items[?name == 'ssl_enabled'].value | [0]"

- set_fact:
    ranger_ssl: "{{ full_ranger_admin_config.json | community.general.json_query(query) }}"
  vars:
    query: "items[?name == 'ssl_enabled'].default | [0]"
  when: ranger_ssl == ""

- name: DEBUG - ranger_ssl
  debug:
    msg: "{{ ranger_ssl }}"
  when: debug | default(false)


- set_fact:
    ranger_protocol: "{{ 'https' if ranger_ssl else 'http' }}"

- name: DEBUG - ranger_protocol
  debug:
    msg: "{{ ranger_protocol }}"
  when: debug | default(false)


- set_fact:
    ranger_port: "{{ full_ranger_config.json | community.general.json_query(query) }}"
  vars:
    query: "items[?name == 'ranger_service_https_port'].value | [0]"
  when: ranger_ssl

- set_fact:
    ranger_port: "{{ full_ranger_config.json | community.general.json_query(query) }}"
  vars:
    query: "items[?name == 'ranger_service_https_port'].default | [0]"
  when: ranger_ssl and ranger_port == ""

- set_fact:
    ranger_port: "{{ full_ranger_config.json | community.general.json_query(query) }}"
  vars:
    query: "items[?name == 'ranger_service_http_port'].value | [0]"
  when: not ranger_ssl

- set_fact:
    ranger_port: "{{ full_ranger_config.json | community.general.json_query(query) }}"
  vars:
    query: "items[?name == 'ranger_service_http_port'].default | [0]"
  when: not ranger_ssl and ranger_port == ""

- name: DEBUG - ranger_port
  debug:
    msg: "{{ ranger_port }}"
  when: debug | default(false)


- set_fact:
    ranger_url: "{{ ranger_protocol }}://{{ ranger_server }}:{{ ranger_port }}"

- name: DEBUG - ranger_url
  debug:
    msg: "{{ ranger_url }}"
  when: debug | default(false)


# Get all services as a list

- name: Get Ranger services 
  uri: 
    url: "{{ ranger_url }}/service/public/v2/api/service"
    method: GET
    user: "{{ ranger_user }}"
    password: "{{ ranger_password }}"
    return_content: yes
    body_format: json
    status_code: 200
    validate_certs: no
    force_basic_auth: yes
  register: services

- set_fact:
    ranger_services_hdfs: "{{ services.json | community.general.json_query(query) }}"
  vars:
    query: "[?type == 'hdfs'].name"

- name: DEBUG - ranger_services_hdfs
  debug:
    msg: "{{ ranger_services_hdfs }}"
  when: debug | default(false)

- set_fact:
    ranger_services_hbase: "{{ services.json | community.general.json_query(query) }}"
  vars:
    query: "[?type == 'hbase'].name"

- name: DEBUG - ranger_services_hbase
  debug:
    msg: "{{ ranger_services_hbase }}"
  when: debug | default(false)


- set_fact:
    ranger_services_yarn: "{{ services.json | community.general.json_query(query) }}"
  vars:
    query: "[?type == 'yarn'].name"

- name: DEBUG - ranger_services_yarn
  debug:
    msg: "{{ ranger_services_yarn }}"
  when: debug | default(false)


- set_fact:
    ranger_services_hive: "{{ services.json | community.general.json_query(query) }}"
  vars:
    query: "[?type == 'hive'].name"

- name: DEBUG - ranger_services_hive
  debug:
    msg: "{{ ranger_services_hive }}"
  when: debug | default(false)


- set_fact:
    ranger_services_knox: "{{ services.json | community.general.json_query(query) }}"
  vars:
    query: "[?type == 'knox'].name"

- name: DEBUG - ranger_services_knox
  debug:
    msg: "{{ ranger_services_knox }}"
  when: debug | default(false)


- set_fact:
    ranger_services_ozone: "{{ services.json | community.general.json_query(query) }}"
  vars:
    query: "[?type == 'ozone'].name"

- name: DEBUG - ranger_services_ozone
  debug:
    msg: "{{ ranger_services_ozone }}"
  when: debug | default(false)


- set_fact:
    ranger_services_kafka: "{{ services.json | community.general.json_query(query) }}"
  vars:
    query: "[?type == 'kafka'].name"

- name: DEBUG - ranger_services_kafka
  debug:
    msg: "{{ ranger_services_kafka }}"
  when: debug | default(false)


- set_fact:
    ranger_services_solr: "{{ services.json | community.general.json_query(query) }}"
  vars:
    query: "[?type == 'solr'].name"

- name: DEBUG - ranger_services_solr
  debug:
    msg: "{{ ranger_services_solr }}"
  when: debug | default(false)


- set_fact:
    ranger_services_atlas: "{{ services.json | community.general.json_query(query) }}"
  vars:
    query: "[?type == 'atlas'].name"

- name: DEBUG - ranger_services_atlas
  debug:
    msg: "{{ ranger_services_atlas }}"
  when: debug | default(false)


- set_fact:
    ranger_services_nifi: "{{ services.json | community.general.json_query(query) }}"
  vars:
    query: "[?type == 'nifi'].name"

- name: DEBUG - ranger_services_nifi
  debug:
    msg: "{{ ranger_services_nifi }}"
  when: debug | default(false)

- set_fact:
    ranger_services_nifiregistry: "{{ services.json | community.general.json_query(query) }}"
  vars:
    query: "[?type == 'nifi-registry'].name"

- name: DEBUG - ranger_services_nifiregistry
  debug:
    msg: "{{ ranger_services_nifiregistry }}"
  when: debug | default(false)

- set_fact:
    ranger_services_kudu: "{{ services.json | community.general.json_query(query) }}"
  vars:
    query: "[?type == 'kudu'].name"

- name: DEBUG - ranger_services_kudu
  debug:
    msg: "{{ ranger_services_kudu }}"
  when: debug | default(false)


- set_fact:
    ranger_services_schemaregistry: "{{ services.json | community.general.json_query(query) }}"
  vars:
    query: "[?type == 'schema-registry'].name"

- name: DEBUG - ranger_services_schemaregistry
  debug:
    msg: "{{ ranger_services_schemaregistry }}"
  when: debug | default(false)

  